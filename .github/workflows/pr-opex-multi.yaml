name: PR Opex Dashboard openapi

on:
  workflow_dispatch:

  pull_request:
    types: [opened, synchronize]
    paths:
      - ".github/workflows/pr-opex-multi.yaml"
      - ".github/workflows/release-opex-multi.yaml"
      - "apps/vehicles/openapi/bff-openapi.yaml"
      - "apps/vehicles/.opex/**"
      - "apps/licences/openapi/bff-openapi.yaml"
      - "apps/licences/.opex/**"

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  DOCKER_IMAGE_TAG: sha256:04d8ead53c772d23b094c2a395292dc159e6f2905e1b13b5f828f31eac6eb27f
  TEMPLATE_DIR: azure-dashboard

jobs:
  check-changes:
    runs-on: ubuntu-22.04
    name: Check Changes
    outputs:
      changed_apps: ${{ steps.set-output.outputs.changed_apps }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: get_changed_files
        run: |
          git fetch origin ${{ github.base_ref }}
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | xargs)
          echo "changed_files=${changed_files}" >> $GITHUB_OUTPUT
          echo "Changed files: ${changed_files}"

      - name: Initialize changed_apps
        run: echo "changed_apps=" >> $GITHUB_ENV

      - name: Check changes for Licences Application
        id: check_licences
        run: |
          if echo "${{ steps.get_changed_files.outputs.changed_files }}" | grep -qE 'apps/licences/openapi/bff-openapi.yaml|\apps/licences/.opex/|\.github/workflows/release-opex-multi.yaml|\.github/workflows/pr-opex-multi.yaml'; then
            if [ -z "${changed_apps}" ]; then
              echo "changed_apps=licences" >> $GITHUB_ENV
            else
            
              echo "changed_apps=${changed_apps} licences" >> $GITHUB_ENV
            fi
          fi

      - name: Check changes for Vehicles Application
        id: check_vehicles
        run: |
          if echo "${{ steps.get_changed_files.outputs.changed_files }}" | grep -qE 'apps/vehicles/openapi/bff-openapi.yaml|\apps/vehicles/.opex/|\.github/workflows/release-opex-multi.yaml|\.github/workflows/pr-opex-multi.yaml'; then
            if [ -z "${changed_apps}" ]; then
              echo "changed_apps=vehicles" >> $GITHUB_ENV
            else
              echo "changed_apps=${changed_apps} vehicles" >> $GITHUB_ENV
            fi
          fi

      - name: Set output
        id: set-output
        run: |
          changed_apps=$(echo "${changed_apps}" | sed 's/ $//' | tr ' ' '\n' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "changed_apps=${changed_apps}" >> $GITHUB_OUTPUT
          echo "Changed apps: ${changed_apps}"

  tf_plan:
    runs-on: ubuntu-22.04
    name: Terraform Plan
    environment: opex-prod-ci
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    continue-on-error: true
    strategy:
      matrix:
        app: ${{ fromJson(needs.check-changes.outputs.changed_apps) }}
    steps:
      - uses: actions/checkout@3b9b8c884f6b4bb4d5be2779c26374abadae0871 # v4.2.2
        name: Checkout

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-terraform-version
        run: |
          set -eu
          terraform_version=$(cat .terraform-version)
          printf "terraform_version=$terraform_version" >> "$GITHUB_OUTPUT"
      - name: Create Terraform Environment for Opex
        shell: bash
        run: |
          docker run \
            --workdir /github/workspace --rm \
            -v $(pwd):"/github/workspace" \
            ghcr.io/pagopa/opex-dashboard-azure-action@${{ env.DOCKER_IMAGE_TAG }} ${{ env.TEMPLATE_DIR }} apps/${{ matrix.app }}/.opex/${{ matrix.app }}/env/prod/config.yaml
      - name: Copy Environments
        shell: bash
        id: opex_copy
        run: |
          cp -R apps/${{ env.APP_NAME }}/.opex/${{ env.API_NAME }}/env ./${{ env.TEMPLATE_DIR }}
      - name: Setup Terraform
        id: terraform_setup
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}

      - name: Terraform Plan
        shell: bash
        id: plan
        working-directory: ${{ env.TEMPLATE_DIR }}
        run: |
          bash ./terraform.sh plan prod -no-color 2>&1 | grep -v "hidden-link:"  | tee plan_output.txt
          OUTPUT=$(grep -Ev "Refreshing state|state lock|Reading|Read" plan_output.txt | tail -c 60000)
          printf "%s" "$OUTPUT" > plan_output_multiline.txt
          if grep -q "::error::Terraform exited with code" plan_output.txt; then
            echo "failed"
            exit 1
          fi
      - name: Post Plan on PR
        id: comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('${{ env.TEMPLATE_DIR }}/plan_output_multiline.txt', 'utf8');
            const status = '${{ steps.plan.outcome }}'
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Terraform Plan ('Opex')`)
            })
            const commentBody = `#### ðŸ“– Terraform Plan ('${{ env.TEMPLATE_DIR }}') - ${status}
            <details>
            <summary>Terraform Plan</summary>
            \`\`\`hcl
            ${output}
            \`\`\`
            </details>
            `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
              issue_number: context.issue.number
            })
      - name: Check Terraform Plan Result
        if: always() && steps.plan.outcome != 'success'
        run: |
          exit 1
